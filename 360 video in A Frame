<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Multi-Scene 360° Video Navigator</title>
    <script src="https://aframe.io/releases/1.4.0/aframe.min.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v6.1.1/dist/aframe-extras.min.js"></script>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background: #000;
            overflow: hidden;
        }
        
        #ui-overlay {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1000;
            color: white;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            max-width: 300px;
        }
        
        .control-button {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 8px 16px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 12px;
        }
        
        .control-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        
        #scene-selector {
            margin-top: 15px;
            padding-top: 10px;
            border-top: 1px solid rgba(255, 255, 255, 0.3);
        }
        
        .scene-button {
            background: rgba(74, 144, 226, 0.6);
            border: 1px solid rgba(74, 144, 226, 0.8);
            color: white;
            padding: 6px 12px;
            margin: 3px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            transition: all 0.3s ease;
        }
        
        .scene-button:hover {
            background: rgba(74, 144, 226, 0.8);
        }
        
        .scene-button.active {
            background: rgba(255, 193, 7, 0.8);
            border-color: rgba(255, 193, 7, 1);
        }
        
        #instructions {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
            color: white;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border-radius: 10px;
            max-width: 280px;
            backdrop-filter: blur(10px);
        }
        
        .navigation-info {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
            color: white;
            background: rgba(0, 0, 0, 0.8);
            padding: 15px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
        }
        
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            color: white;
            font-size: 18px;
        }
        
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #fff;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin-right: 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay">
        <div class="loading-spinner"></div>
        <div>Loading 360° Experience...</div>
    </div>
    
    <!-- UI Overlay -->
    <div id="ui-overlay">
        <h3>360° Video Navigator</h3>
        <div>
            <strong>Current Scene:</strong> <span id="current-scene-name">Living Room</span>
        </div>
        <div style="margin-top: 10px;">
            <button class="control-button" onclick="toggleVideo()">Play/Pause</button>
            <button class="control-button" onclick="toggleMute()">Mute/Unmute</button>
            <button class="control-button" onclick="restartVideo()">Restart</button>
        </div>
        <div style="margin-top: 5px;">
            <label style="font-size: 12px;">Volume: </label>
            <input type="range" min="0" max="1" step="0.1" value="0.7" onchange="setVolume(this.value)" style="width: 100px;">
        </div>
        <div id="debug-info" style="margin-top: 10px; font-size: 11px; color: #aaa;">
            <div>Status: <span id="video-status">Loading...</span></div>
            <div>Video Ready: <span id="video-ready">No</span></div>
        </div>
        <div id="youtube-helper" style="margin-top: 15px; padding-top: 10px; border-top: 1px solid rgba(255, 255, 255, 0.3);">
            <div style="font-size: 12px; color: #ffd700; margin-bottom: 8px;">YouTube 360° Integration:</div>
            <div style="font-size: 11px; color: #ccc; margin-bottom: 5px;">
                Garden scene: <a href="https://www.youtube.com/watch?v=ZZyBG6UsvoQ" target="_blank" style="color: #4a90e2;">Mountain Biking 360°</a>
            </div>
            <div style="font-size: 10px; color: #999;">
                To use: Download video → Upload to server → Replace URL
            </div>
            <button class="control-button" onclick="openYouTubeVideo()" style="font-size: 10px; padding: 4px 8px;">View on YouTube</button>
        </div>
        <div id="scene-selector">
            <div style="font-size: 12px; margin-bottom: 8px; color: #ccc;">Quick Navigation:</div>
            <button class="scene-button active" onclick="switchToScene(0)">Living Room</button>
            <button class="scene-button" onclick="switchToScene(1)">Kitchen</button>
            <button class="scene-button" onclick="switchToScene(2)">Bedroom</button>
            <button class="scene-button" onclick="switchToScene(3)">Garden</button>
        </div>
    </div>
    
    <!-- Navigation Info -->
    <div class="navigation-info">
        <h4 style="margin-top: 0;">Navigation Tips</h4>
        <p style="font-size: 12px; margin: 5px 0;">• Look for glowing arrows to navigate</p>
        <p style="font-size: 12px; margin: 5px 0;">• Click arrows to jump between scenes</p>
        <p style="font-size: 12px; margin: 5px 0;">• Use quick nav buttons on left</p>
    </div>
    
    <!-- Instructions -->
    <div id="instructions">
        <h4>Controls:</h4>
        <p style="font-size: 12px;">• Mouse/Touch: Look around</p>
        <p style="font-size: 12px;">• Click: Interact with elements</p>
        <p style="font-size: 12px;">• Mobile: Tilt device to explore</p>
        <p style="font-size: 12px;">• Arrows: Navigate between videos</p>
    </div>
    
    <!-- A-Frame Scene -->
    <a-scene 
        embedded 
        style="height: 100vh; width: 100vw;"
        vr-mode-ui="enabled: true"
        device-orientation-permission-ui="enabled: true">
        
        <!-- Assets -->
        <a-assets>
            <!-- Multiple 360 Videos - Mix of direct videos and YouTube embed options -->
            <video id="video-living-room" 
                   src="https://raw.githubusercontent.com/FilePlayer/test/gh-pages/SW_360_cube.mp4" 
                   preload="auto" loop="true" crossorigin="anonymous" playsinline webkit-playsinline>
            </video>
            <video id="video-kitchen" 
                   src="https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4" 
                   preload="auto" loop="true" crossorigin="anonymous" playsinline webkit-playsinline>
            </video>
            <video id="video-bedroom" 
                   src="https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4" 
                   preload="auto" loop="true" crossorigin="anonymous" playsinline webkit-playsinline>
            </video>
            <!-- Placeholder for YouTube video - you'll need to download and host this -->
            <video id="video-garden" 
                   src="https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4" 
                   preload="auto" loop="true" crossorigin="anonymous" playsinline webkit-playsinline>
            </video>
        </a-assets>
        
        <!-- 360 Video Sphere -->
        <a-videosphere 
            id="video-sphere"
            src="#video-living-room" 
            rotation="0 180 0"
            radius="100">
        </a-videosphere>
        
        <!-- Navigation Arrows Container -->
        <a-entity id="navigation-arrows">
            
            <!-- Arrow to Kitchen -->
            <a-entity id="arrow-to-kitchen" 
                      position="15 0 -25" 
                      rotation="0 -45 0"
                      class="nav-arrow"
                      data-target="1"
                      data-name="Kitchen"
                      animation__mouseenter="property: scale; to: 1.3 1.3 1.3; startEvents: mouseenter; dur: 200"
                      animation__mouseleave="property: scale; to: 1 1 1; startEvents: mouseleave; dur: 200">
                <!-- Arrow Shape -->
                <a-cone position="0 0 0" radius-bottom="0.8" radius-top="0" height="2" color="#4CAF50" opacity="0.8">
                </a-cone>
                <a-cylinder position="0 -1.5 0" radius="0.3" height="1" color="#4CAF50" opacity="0.8">
                </a-cylinder>
                <!-- Glow Effect -->
                <a-sphere radius="2" color="#4CAF50" opacity="0.1" 
                          animation="property: rotation; to: 0 360 0; loop: true; dur: 4000">
                </a-sphere>
                <!-- Label -->
                <a-text value="Kitchen" position="0 2.5 0" align="center" color="#ffffff" scale="1.5 1.5 1.5">
                </a-text>
            </a-entity>
            
            <!-- Arrow to Bedroom -->
            <a-entity id="arrow-to-bedroom" 
                      position="-20 2 10" 
                      rotation="0 135 0"
                      class="nav-arrow"
                      data-target="2"
                      data-name="Bedroom"
                      animation__mouseenter="property: scale; to: 1.3 1.3 1.3; startEvents: mouseenter; dur: 200"
                      animation__mouseleave="property: scale; to: 1 1 1; startEvents: mouseleave; dur: 200">
                <a-cone position="0 0 0" radius-bottom="0.8" radius-top="0" height="2" color="#2196F3" opacity="0.8">
                </a-cone>
                <a-cylinder position="0 -1.5 0" radius="0.3" height="1" color="#2196F3" opacity="0.8">
                </a-cylinder>
                <a-sphere radius="2" color="#2196F3" opacity="0.1" 
                          animation="property: rotation; to: 360 0 0; loop: true; dur: 3500">
                </a-sphere>
                <a-text value="Bedroom" position="0 2.5 0" align="center" color="#ffffff" scale="1.5 1.5 1.5">
                </a-text>
            </a-entity>
            
            <!-- Arrow to Garden -->
            <a-entity id="arrow-to-garden" 
                      position="5 -3 20" 
                      rotation="0 0 0"
                      class="nav-arrow"
                      data-target="3"
                      data-name="Garden"
                      animation__mouseenter="property: scale; to: 1.3 1.3 1.3; startEvents: mouseenter; dur: 200"
                      animation__mouseleave="property: scale; to: 1 1 1; startEvents: mouseleave; dur: 200">
                <a-cone position="0 0 0" radius-bottom="0.8" radius-top="0" height="2" color="#FF9800" opacity="0.8">
                </a-cone>
                <a-cylinder position="0 -1.5 0" radius="0.3" height="1" color="#FF9800" opacity="0.8">
                </a-cylinder>
                <a-sphere radius="2" color="#FF9800" opacity="0.1" 
                          animation="property: rotation; to: 0 0 360; loop: true; dur: 4500">
                </a-sphere>
                <a-text value="Garden" position="0 2.5 0" align="center" color="#ffffff" scale="1.5 1.5 1.5">
                </a-text>
            </a-entity>
            
        </a-entity>
        
        <!-- Scene Title -->
        <a-text 
            id="scene-title"
            value="Living Room - 360° Experience" 
            position="0 8 -10" 
            align="center" 
            color="#ffffff"
            scale="2.5 2.5 2.5"
            animation="property: rotation; to: 0 360 0; loop: true; dur: 15000">
        </a-text>
        
        <!-- Ambient Lighting -->
        <a-light type="ambient" color="#404040" intensity="0.5"></a-light>
        <a-light type="directional" position="1 1 1" color="#ffffff" intensity="0.6"></a-light>
        
        <!-- Camera with Controls -->
        <a-camera 
            id="main-camera"
            look-controls="pointerLockEnabled: true" 
            wasd-controls="enabled: false"
            cursor="rayOrigin: mouse; fuse: false"
            raycaster="objects: .nav-arrow">
        </a-camera>
        
    </a-scene>
    
    <script>
        // Scene Configuration
        const scenes = [
            {
                name: "Living Room",
                videoId: "#video-living-room",
                title: "Living Room - 360° Experience",
                arrows: [
                    { id: "arrow-to-kitchen", target: 1, visible: true },
                    { id: "arrow-to-bedroom", target: 2, visible: true },
                    { id: "arrow-to-garden", target: 3, visible: true }
                ]
            },
            {
                name: "Kitchen",
                videoId: "#video-kitchen",
                title: "Kitchen - Culinary Experience",
                arrows: [
                    { id: "arrow-to-living", target: 0, visible: true },
                    { id: "arrow-to-bedroom", target: 2, visible: true },
                    { id: "arrow-to-garden", target: 3, visible: false }
                ]
            },
            {
                name: "Bedroom",
                videoId: "#video-bedroom", 
                title: "Bedroom - Rest & Relaxation",
                arrows: [
                    { id: "arrow-to-living", target: 0, visible: true },
                    { id: "arrow-to-kitchen", target: 1, visible: true },
                    { id: "arrow-to-garden", target: 3, visible: true }
                ]
            },
            {
                name: "Garden",
                videoId: "#video-garden",
                title: "Garden - YouTube 360° Video", 
                arrows: [
                    { id: "arrow-to-living", target: 0, visible: true },
                    { id: "arrow-to-kitchen", target: 1, visible: false },
                    { id: "arrow-to-bedroom", target: 2, visible: true }
                ],
                youtubeId: "ZZyBG6UsvoQ", // The YouTube video you suggested!
                isYouTube: false // Set to true when you download and host the video
            }
        ];
        
        let currentScene = 0;
        let currentVideo;
        let isLoading = false;
        
        // Initialize when A-Frame is ready
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                initializeExperience();
            }, 1000);
        });
        
        function initializeExperience() {
            currentVideo = document.querySelector(scenes[currentScene].videoId);
            if (currentVideo) {
                currentVideo.volume = 0.7;
                
                // Add debug event listeners
                currentVideo.addEventListener('loadeddata', function() {
                    document.getElementById('video-ready').textContent = 'Yes';
                    document.getElementById('video-status').textContent = 'Video loaded successfully';
                });
                
                currentVideo.addEventListener('error', function(e) {
                    document.getElementById('video-status').textContent = 'Error: ' + (e.message || 'Video failed to load');
                    console.error('Video error:', e);
                });
                
                currentVideo.addEventListener('canplay', function() {
                    document.getElementById('video-status').textContent = 'Ready to play';
                });
            } else {
                document.getElementById('video-status').textContent = 'Video element not found';
            }
            
            // Add click events to navigation arrows
            addNavigationEvents();
            
            // Update initial arrow visibility
            updateArrowVisibility();
            
            // Hide loading overlay
            setTimeout(() => {
                document.getElementById('loading-overlay').style.display = 'none';
            }, 2000);
        }
        
        // Video control functions
        function toggleVideo() {
            if (!currentVideo) return;
            
            if (currentVideo.paused) {
                currentVideo.play().catch(e => {
                    console.log('Autoplay prevented:', e);
                    alert('Please click the video to start playback');
                });
            } else {
                currentVideo.pause();
            }
        }
        
        function toggleMute() {
            if (!currentVideo) return;
            currentVideo.muted = !currentVideo.muted;
        }
        
        function restartVideo() {
            if (!currentVideo) return;
            currentVideo.currentTime = 0;
            currentVideo.play().catch(e => console.log('Playback error:', e));
        }
        
        function setVolume(value) {
            if (!currentVideo) return;
            currentVideo.volume = parseFloat(value);
        }
        
        // Scene switching function
        function switchToScene(sceneIndex) {
            if (isLoading || sceneIndex === currentScene || sceneIndex < 0 || sceneIndex >= scenes.length) {
                return;
            }
            
            isLoading = true;
            document.getElementById('loading-overlay').style.display = 'flex';
            
            // Pause current video
            if (currentVideo) {
                currentVideo.pause();
            }
            
            setTimeout(() => {
                // Update current scene
                currentScene = sceneIndex;
                const scene = scenes[currentScene];
                
                // Switch video source
                const videoSphere = document.querySelector('#video-sphere');
                videoSphere.setAttribute('src', scene.videoId);
                
                // Update current video reference
                currentVideo = document.querySelector(scene.videoId);
                if (currentVideo) {
                    currentVideo.volume = 0.7;
                    currentVideo.play().catch(e => console.log('Video play error:', e));
                }
                
                // Update scene title
                document.querySelector('#scene-title').setAttribute('value', scene.title);
                
                // Update UI
                document.getElementById('current-scene-name').textContent = scene.name;
                updateSceneButtons();
                updateArrowVisibility();
                
                // Hide loading overlay
                setTimeout(() => {
                    document.getElementById('loading-overlay').style.display = 'none';
                    isLoading = false;
                }, 1500);
                
            }, 500);
        }
        
        // Update scene button states
        function updateSceneButtons() {
            const buttons = document.querySelectorAll('.scene-button');
            buttons.forEach((button, index) => {
                if (index === currentScene) {
                    button.classList.add('active');
                } else {
                    button.classList.remove('active');
                }
            });
        }
        
        // Update arrow visibility based on current scene
        function updateArrowVisibility() {
            const scene = scenes[currentScene];
            const allArrows = document.querySelectorAll('.nav-arrow');
            
            // Hide all arrows first
            allArrows.forEach(arrow => {
                arrow.setAttribute('visible', 'false');
            });
            
            // Show relevant arrows for current scene
            scene.arrows.forEach(arrowConfig => {
                if (arrowConfig.visible) {
                    const arrow = document.querySelector(`#${arrowConfig.id}`);
                    if (arrow) {
                        arrow.setAttribute('visible', 'true');
                        // Update arrow target and label
                        arrow.setAttribute('data-target', arrowConfig.target);
                        
                        const label = arrow.querySelector('a-text');
                        if (label) {
                            label.setAttribute('value', scenes[arrowConfig.target].name);
                        }
                    }
                }
            });
        }
        
        // Add navigation events
        function addNavigationEvents() {
            const arrows = document.querySelectorAll('.nav-arrow');
            arrows.forEach(arrow => {
                arrow.addEventListener('click', function(evt) {
                    const targetScene = parseInt(this.getAttribute('data-target'));
                    const targetName = this.getAttribute('data-name') || scenes[targetScene].name;
                    
                    console.log(`Navigating to: ${targetName} (Scene ${targetScene})`);
                    switchToScene(targetScene);
                });
            });
        }
        
        // Open YouTube video in new tab
        function openYouTubeVideo() {
            const scene = scenes[currentScene];
            if (scene.youtubeId) {
                window.open(`https://www.youtube.com/watch?v=${scene.youtubeId}`, '_blank');
            }
        }
        
        // Auto-play attempt with user gesture fallback
        document.addEventListener('click', function() {
            if (currentVideo && currentVideo.paused) {
                currentVideo.play().catch(e => console.log('Play failed:', e));
            }
        }, { once: true });
        
        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            switch(event.key) {
                case ' ': // Spacebar
                    event.preventDefault();
                    toggleVideo();
                    break;
                case 'm':
                    toggleMute();
                    break;
                case 'r':
                    restartVideo();
                    break;
                case '1':
                    switchToScene(0);
                    break;
                case '2':
                    switchToScene(1);
                    break;
                case '3':
                    switchToScene(2);
                    break;
                case '4':
                    switchToScene(3);
                    break;
                case 'ArrowLeft':
                    switchToScene(Math.max(0, currentScene - 1));
                    break;
                case 'ArrowRight':
                    switchToScene(Math.min(scenes.length - 1, currentScene + 1));
                    break;
            }
        });
    </script>
</body>
</html>
